name: Build and Deploy to EC2

on:
  push:
    branches:
      - main  # main 브랜치에 푸시할 때 실행
      - feat/deploy

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # .env 파일 생성 및 ssh 키 디코딩
      - name: Load .env and export variables
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          source .env
          echo "SSH_HOST=$SSH_HOST" >> $GITHUB_ENV
          echo "SSH_PORT=$SSH_PORT" >> $GITHUB_ENV
          echo "SSH_USER=$SSH_USER" >> $GITHUB_ENV
          echo "$SSH_KEY_BASE64" | base64 -d > private_key
          chmod 600 private_key

        # JDK 설정
      - name: ☕️ set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Maven 빌드
      - name: Build JAR File
        run: |
          mvn clean package -DskipTests

      # Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          source .env
          docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
          docker build -t $DOCKER_USERNAME/whenwhen:latest .
          docker push $DOCKER_USERNAME/whenwhen:latest

      # 서버에 배포
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST }}
          port: ${{ env.SSH_PORT }}
          username: ${{ env.SSH_USER }}
          key_path: private_key
          script: |
            echo "${{ secrets.ENV_FILE }}" > .env
            source .env
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
            docker pull $DOCKER_USERNAME/whenwhen:latest
            docker stop whenwhen-container || true
            docker rm whenwhen-container || true
            docker run -d \
            -p 8080:8080 \
            --name whenwhen-container \
            --env-file .env \
            "$DOCKER_USERNAME/whenwhen:latest"